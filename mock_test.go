// Code generated by MockGen. DO NOT EDIT.
// Source: atlasic.go
//
// Generated by this command:
//
//	mockgen -source=atlasic.go -destination=mock_test.go -package=atlasic
//

// Package atlasic is a generated GoMock package.
package atlasic

import (
	context "context"
	reflect "reflect"

	a2a "github.com/mashiike/atlasic/a2a"
	gomock "go.uber.org/mock/gomock"
)

// MockAgent is a mock of Agent interface.
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMockRecorder
	isgomock struct{}
}

// MockAgentMockRecorder is the mock recorder for MockAgent.
type MockAgentMockRecorder struct {
	mock *MockAgent
}

// NewMockAgent creates a new mock instance.
func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &MockAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent) EXPECT() *MockAgentMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockAgent) Execute(ctx context.Context, handle TaskHandle) (*a2a.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, handle)
	ret0, _ := ret[0].(*a2a.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockAgentMockRecorder) Execute(ctx, handle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockAgent)(nil).Execute), ctx, handle)
}

// GetMetadata mocks base method.
func (m *MockAgent) GetMetadata(ctx context.Context) (*AgentMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", ctx)
	ret0, _ := ret[0].(*AgentMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockAgentMockRecorder) GetMetadata(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockAgent)(nil).GetMetadata), ctx)
}

// MockTaskLocker is a mock of TaskLocker interface.
type MockTaskLocker struct {
	ctrl     *gomock.Controller
	recorder *MockTaskLockerMockRecorder
	isgomock struct{}
}

// MockTaskLockerMockRecorder is the mock recorder for MockTaskLocker.
type MockTaskLockerMockRecorder struct {
	mock *MockTaskLocker
}

// NewMockTaskLocker creates a new mock instance.
func NewMockTaskLocker(ctrl *gomock.Controller) *MockTaskLocker {
	mock := &MockTaskLocker{ctrl: ctrl}
	mock.recorder = &MockTaskLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskLocker) EXPECT() *MockTaskLockerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTaskLocker) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTaskLockerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTaskLocker)(nil).Close))
}

// Lock mocks base method.
func (m *MockTaskLocker) Lock(ctx context.Context, taskID string) (func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx, taskID)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockTaskLockerMockRecorder) Lock(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockTaskLocker)(nil).Lock), ctx, taskID)
}

// MockTaskStatusError is a mock of TaskStatusError interface.
type MockTaskStatusError struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStatusErrorMockRecorder
	isgomock struct{}
}

// MockTaskStatusErrorMockRecorder is the mock recorder for MockTaskStatusError.
type MockTaskStatusErrorMockRecorder struct {
	mock *MockTaskStatusError
}

// NewMockTaskStatusError creates a new mock instance.
func NewMockTaskStatusError(ctrl *gomock.Controller) *MockTaskStatusError {
	mock := &MockTaskStatusError{ctrl: ctrl}
	mock.recorder = &MockTaskStatusErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStatusError) EXPECT() *MockTaskStatusErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockTaskStatusError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockTaskStatusErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockTaskStatusError)(nil).Error))
}

// ToTaskStatus mocks base method.
func (m *MockTaskStatusError) ToTaskStatus() a2a.TaskStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTaskStatus")
	ret0, _ := ret[0].(a2a.TaskStatus)
	return ret0
}

// ToTaskStatus indicates an expected call of ToTaskStatus.
func (mr *MockTaskStatusErrorMockRecorder) ToTaskStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTaskStatus", reflect.TypeOf((*MockTaskStatusError)(nil).ToTaskStatus))
}
