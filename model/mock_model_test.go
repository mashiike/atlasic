// Code generated by MockGen. DO NOT EDIT.
// Source: ../../model/model.go
//
// Generated by this command:
//
//	mockgen -source=../../model/model.go -destination=../../model/mock_model_test.go -package=model
//

// Package model is a generated GoMock package.
package model

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockModel is a mock of Model interface.
type MockModel struct {
	ctrl     *gomock.Controller
	recorder *MockModelMockRecorder
	isgomock struct{}
}

// MockModelMockRecorder is the mock recorder for MockModel.
type MockModelMockRecorder struct {
	mock *MockModel
}

// NewMockModel creates a new mock instance.
func NewMockModel(ctrl *gomock.Controller) *MockModel {
	mock := &MockModel{ctrl: ctrl}
	mock.recorder = &MockModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModel) EXPECT() *MockModelMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockModel) Generate(ctx context.Context, req *GenerateRequest) (*GenerateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctx, req)
	ret0, _ := ret[0].(*GenerateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockModelMockRecorder) Generate(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockModel)(nil).Generate), ctx, req)
}

// ID mocks base method.
func (m *MockModel) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockModelMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockModel)(nil).ID))
}

// InputModes mocks base method.
func (m *MockModel) InputModes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputModes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// InputModes indicates an expected call of InputModes.
func (mr *MockModelMockRecorder) InputModes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputModes", reflect.TypeOf((*MockModel)(nil).InputModes))
}

// OutputModes mocks base method.
func (m *MockModel) OutputModes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputModes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// OutputModes indicates an expected call of OutputModes.
func (mr *MockModelMockRecorder) OutputModes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputModes", reflect.TypeOf((*MockModel)(nil).OutputModes))
}

// MockModelProvider is a mock of ModelProvider interface.
type MockModelProvider struct {
	ctrl     *gomock.Controller
	recorder *MockModelProviderMockRecorder
	isgomock struct{}
}

// MockModelProviderMockRecorder is the mock recorder for MockModelProvider.
type MockModelProviderMockRecorder struct {
	mock *MockModelProvider
}

// NewMockModelProvider creates a new mock instance.
func NewMockModelProvider(ctrl *gomock.Controller) *MockModelProvider {
	mock := &MockModelProvider{ctrl: ctrl}
	mock.recorder = &MockModelProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelProvider) EXPECT() *MockModelProviderMockRecorder {
	return m.recorder
}

// GetModel mocks base method.
func (m *MockModelProvider) GetModel(ctx context.Context, modelID string) (Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", ctx, modelID)
	ret0, _ := ret[0].(Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockModelProviderMockRecorder) GetModel(ctx, modelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockModelProvider)(nil).GetModel), ctx, modelID)
}
