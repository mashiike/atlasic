// Code generated by MockGen. DO NOT EDIT.
// Source: agent_service.go
//
// Generated by this command:
//
//	mockgen -source=agent_service.go -destination=./agent_service_test.go -package transport
//

// Package transport is a generated GoMock package.
package transport

import (
	context "context"
	reflect "reflect"

	a2a "github.com/mashiike/atlasic/a2a"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentService is a mock of AgentService interface.
type MockAgentService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentServiceMockRecorder
	isgomock struct{}
}

// MockAgentServiceMockRecorder is the mock recorder for MockAgentService.
type MockAgentServiceMockRecorder struct {
	mock *MockAgentService
}

// NewMockAgentService creates a new mock instance.
func NewMockAgentService(ctrl *gomock.Controller) *MockAgentService {
	mock := &MockAgentService{ctrl: ctrl}
	mock.recorder = &MockAgentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentService) EXPECT() *MockAgentServiceMockRecorder {
	return m.recorder
}

// CancelTask mocks base method.
func (m *MockAgentService) CancelTask(ctx context.Context, params a2a.TaskIDParams) (*a2a.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTask", ctx, params)
	ret0, _ := ret[0].(*a2a.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTask indicates an expected call of CancelTask.
func (mr *MockAgentServiceMockRecorder) CancelTask(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockAgentService)(nil).CancelTask), ctx, params)
}

// DeleteTaskPushNotificationConfig mocks base method.
func (m *MockAgentService) DeleteTaskPushNotificationConfig(ctx context.Context, params a2a.DeleteTaskPushNotificationConfigParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskPushNotificationConfig", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskPushNotificationConfig indicates an expected call of DeleteTaskPushNotificationConfig.
func (mr *MockAgentServiceMockRecorder) DeleteTaskPushNotificationConfig(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskPushNotificationConfig", reflect.TypeOf((*MockAgentService)(nil).DeleteTaskPushNotificationConfig), ctx, params)
}

// GetAgentCard mocks base method.
func (m *MockAgentService) GetAgentCard(ctx context.Context) (*a2a.AgentCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentCard", ctx)
	ret0, _ := ret[0].(*a2a.AgentCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentCard indicates an expected call of GetAgentCard.
func (mr *MockAgentServiceMockRecorder) GetAgentCard(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentCard", reflect.TypeOf((*MockAgentService)(nil).GetAgentCard), ctx)
}

// GetTask mocks base method.
func (m *MockAgentService) GetTask(ctx context.Context, params a2a.TaskQueryParams) (*a2a.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, params)
	ret0, _ := ret[0].(*a2a.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockAgentServiceMockRecorder) GetTask(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockAgentService)(nil).GetTask), ctx, params)
}

// GetTaskPushNotificationConfig mocks base method.
func (m *MockAgentService) GetTaskPushNotificationConfig(ctx context.Context, params a2a.GetTaskPushNotificationConfigParams) (*a2a.TaskPushNotificationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskPushNotificationConfig", ctx, params)
	ret0, _ := ret[0].(*a2a.TaskPushNotificationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskPushNotificationConfig indicates an expected call of GetTaskPushNotificationConfig.
func (mr *MockAgentServiceMockRecorder) GetTaskPushNotificationConfig(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskPushNotificationConfig", reflect.TypeOf((*MockAgentService)(nil).GetTaskPushNotificationConfig), ctx, params)
}

// ListTaskPushNotificationConfig mocks base method.
func (m *MockAgentService) ListTaskPushNotificationConfig(ctx context.Context, params a2a.TaskIDParams) ([]a2a.TaskPushNotificationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaskPushNotificationConfig", ctx, params)
	ret0, _ := ret[0].([]a2a.TaskPushNotificationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaskPushNotificationConfig indicates an expected call of ListTaskPushNotificationConfig.
func (mr *MockAgentServiceMockRecorder) ListTaskPushNotificationConfig(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaskPushNotificationConfig", reflect.TypeOf((*MockAgentService)(nil).ListTaskPushNotificationConfig), ctx, params)
}

// SendMessage mocks base method.
func (m *MockAgentService) SendMessage(ctx context.Context, params a2a.MessageSendParams) (*a2a.SendMessageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, params)
	ret0, _ := ret[0].(*a2a.SendMessageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockAgentServiceMockRecorder) SendMessage(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockAgentService)(nil).SendMessage), ctx, params)
}

// SendStreamingMessage mocks base method.
func (m *MockAgentService) SendStreamingMessage(ctx context.Context, params a2a.MessageSendParams) (<-chan a2a.StreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendStreamingMessage", ctx, params)
	ret0, _ := ret[0].(<-chan a2a.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendStreamingMessage indicates an expected call of SendStreamingMessage.
func (mr *MockAgentServiceMockRecorder) SendStreamingMessage(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStreamingMessage", reflect.TypeOf((*MockAgentService)(nil).SendStreamingMessage), ctx, params)
}

// SetTaskPushNotificationConfig mocks base method.
func (m *MockAgentService) SetTaskPushNotificationConfig(ctx context.Context, params a2a.TaskPushNotificationConfig) (*a2a.TaskPushNotificationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTaskPushNotificationConfig", ctx, params)
	ret0, _ := ret[0].(*a2a.TaskPushNotificationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTaskPushNotificationConfig indicates an expected call of SetTaskPushNotificationConfig.
func (mr *MockAgentServiceMockRecorder) SetTaskPushNotificationConfig(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskPushNotificationConfig", reflect.TypeOf((*MockAgentService)(nil).SetTaskPushNotificationConfig), ctx, params)
}

// SupportedOutputModes mocks base method.
func (m *MockAgentService) SupportedOutputModes(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedOutputModes", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportedOutputModes indicates an expected call of SupportedOutputModes.
func (mr *MockAgentServiceMockRecorder) SupportedOutputModes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedOutputModes", reflect.TypeOf((*MockAgentService)(nil).SupportedOutputModes), ctx)
}

// TaskResubscription mocks base method.
func (m *MockAgentService) TaskResubscription(ctx context.Context, params a2a.TaskIDParams) (<-chan a2a.StreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskResubscription", ctx, params)
	ret0, _ := ret[0].(<-chan a2a.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskResubscription indicates an expected call of TaskResubscription.
func (mr *MockAgentServiceMockRecorder) TaskResubscription(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskResubscription", reflect.TypeOf((*MockAgentService)(nil).TaskResubscription), ctx, params)
}

// MockExtensionAware is a mock of ExtensionAware interface.
type MockExtensionAware struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionAwareMockRecorder
	isgomock struct{}
}

// MockExtensionAwareMockRecorder is the mock recorder for MockExtensionAware.
type MockExtensionAwareMockRecorder struct {
	mock *MockExtensionAware
}

// NewMockExtensionAware creates a new mock instance.
func NewMockExtensionAware(ctrl *gomock.Controller) *MockExtensionAware {
	mock := &MockExtensionAware{ctrl: ctrl}
	mock.recorder = &MockExtensionAwareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtensionAware) EXPECT() *MockExtensionAwareMockRecorder {
	return m.recorder
}

// GetExtendedAgentCard mocks base method.
func (m *MockExtensionAware) GetExtendedAgentCard(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtendedAgentCard", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtendedAgentCard indicates an expected call of GetExtendedAgentCard.
func (mr *MockExtensionAwareMockRecorder) GetExtendedAgentCard(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtendedAgentCard", reflect.TypeOf((*MockExtensionAware)(nil).GetExtendedAgentCard), ctx)
}

// GetExtensions mocks base method.
func (m *MockExtensionAware) GetExtensions() []Extension {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensions")
	ret0, _ := ret[0].([]Extension)
	return ret0
}

// GetExtensions indicates an expected call of GetExtensions.
func (mr *MockExtensionAwareMockRecorder) GetExtensions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensions", reflect.TypeOf((*MockExtensionAware)(nil).GetExtensions))
}

// SetExtensions mocks base method.
func (m *MockExtensionAware) SetExtensions(extensions []Extension) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExtensions", extensions)
}

// SetExtensions indicates an expected call of SetExtensions.
func (mr *MockExtensionAwareMockRecorder) SetExtensions(extensions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExtensions", reflect.TypeOf((*MockExtensionAware)(nil).SetExtensions), extensions)
}
