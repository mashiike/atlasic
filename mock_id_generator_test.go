// Code generated by MockGen. DO NOT EDIT.
// Source: id_generator.go
//
// Generated by this command:
//
//	mockgen -source=id_generator.go -destination=mock_id_generator_test.go -package=atlasic
//

// Package atlasic is a generated GoMock package.
package atlasic

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIDGenerator is a mock of IDGenerator interface.
type MockIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIDGeneratorMockRecorder
	isgomock struct{}
}

// MockIDGeneratorMockRecorder is the mock recorder for MockIDGenerator.
type MockIDGeneratorMockRecorder struct {
	mock *MockIDGenerator
}

// NewMockIDGenerator creates a new mock instance.
func NewMockIDGenerator(ctrl *gomock.Controller) *MockIDGenerator {
	mock := &MockIDGenerator{ctrl: ctrl}
	mock.recorder = &MockIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDGenerator) EXPECT() *MockIDGeneratorMockRecorder {
	return m.recorder
}

// GenerateContextID mocks base method.
func (m *MockIDGenerator) GenerateContextID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateContextID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateContextID indicates an expected call of GenerateContextID.
func (mr *MockIDGeneratorMockRecorder) GenerateContextID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateContextID", reflect.TypeOf((*MockIDGenerator)(nil).GenerateContextID))
}

// GenerateMessageID mocks base method.
func (m *MockIDGenerator) GenerateMessageID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMessageID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateMessageID indicates an expected call of GenerateMessageID.
func (mr *MockIDGeneratorMockRecorder) GenerateMessageID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMessageID", reflect.TypeOf((*MockIDGenerator)(nil).GenerateMessageID))
}

// GeneratePushNotificationConfigID mocks base method.
func (m *MockIDGenerator) GeneratePushNotificationConfigID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePushNotificationConfigID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GeneratePushNotificationConfigID indicates an expected call of GeneratePushNotificationConfigID.
func (mr *MockIDGeneratorMockRecorder) GeneratePushNotificationConfigID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePushNotificationConfigID", reflect.TypeOf((*MockIDGenerator)(nil).GeneratePushNotificationConfigID))
}

// GenerateTaskID mocks base method.
func (m *MockIDGenerator) GenerateTaskID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTaskID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateTaskID indicates an expected call of GenerateTaskID.
func (mr *MockIDGeneratorMockRecorder) GenerateTaskID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTaskID", reflect.TypeOf((*MockIDGenerator)(nil).GenerateTaskID))
}
