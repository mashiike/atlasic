// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -destination=mock_storage_test.go -package=atlasic
//

// Package atlasic is a generated GoMock package.
package atlasic

import (
	context "context"
	reflect "reflect"

	a2a "github.com/mashiike/atlasic/a2a"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockStorage) Append(ctx context.Context, contextID, taskID string, expected uint64, events []a2a.StreamResponse) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, contextID, taskID, expected, events)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append.
func (mr *MockStorageMockRecorder) Append(ctx, contextID, taskID, expected, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockStorage)(nil).Append), ctx, contextID, taskID, expected, events)
}

// DeleteContextFile mocks base method.
func (m *MockStorage) DeleteContextFile(ctx context.Context, contextID, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContextFile", ctx, contextID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContextFile indicates an expected call of DeleteContextFile.
func (mr *MockStorageMockRecorder) DeleteContextFile(ctx, contextID, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContextFile", reflect.TypeOf((*MockStorage)(nil).DeleteContextFile), ctx, contextID, path)
}

// DeleteTaskFile mocks base method.
func (m *MockStorage) DeleteTaskFile(ctx context.Context, taskID, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskFile", ctx, taskID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskFile indicates an expected call of DeleteTaskFile.
func (mr *MockStorageMockRecorder) DeleteTaskFile(ctx, taskID, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskFile", reflect.TypeOf((*MockStorage)(nil).DeleteTaskFile), ctx, taskID, path)
}

// DeleteTaskPushNotificationConfig mocks base method.
func (m *MockStorage) DeleteTaskPushNotificationConfig(ctx context.Context, taskID, configID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskPushNotificationConfig", ctx, taskID, configID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskPushNotificationConfig indicates an expected call of DeleteTaskPushNotificationConfig.
func (mr *MockStorageMockRecorder) DeleteTaskPushNotificationConfig(ctx, taskID, configID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskPushNotificationConfig", reflect.TypeOf((*MockStorage)(nil).DeleteTaskPushNotificationConfig), ctx, taskID, configID)
}

// GetContextFile mocks base method.
func (m *MockStorage) GetContextFile(ctx context.Context, contextID, path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextFile", ctx, contextID, path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextFile indicates an expected call of GetContextFile.
func (mr *MockStorageMockRecorder) GetContextFile(ctx, contextID, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextFile", reflect.TypeOf((*MockStorage)(nil).GetContextFile), ctx, contextID, path)
}

// GetTask mocks base method.
func (m *MockStorage) GetTask(ctx context.Context, taskID string, historyLength int) (*a2a.Task, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, taskID, historyLength)
	ret0, _ := ret[0].(*a2a.Task)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTask indicates an expected call of GetTask.
func (mr *MockStorageMockRecorder) GetTask(ctx, taskID, historyLength any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockStorage)(nil).GetTask), ctx, taskID, historyLength)
}

// GetTaskFile mocks base method.
func (m *MockStorage) GetTaskFile(ctx context.Context, taskID, path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskFile", ctx, taskID, path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskFile indicates an expected call of GetTaskFile.
func (mr *MockStorageMockRecorder) GetTaskFile(ctx, taskID, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskFile", reflect.TypeOf((*MockStorage)(nil).GetTaskFile), ctx, taskID, path)
}

// GetTaskPushNotificationConfig mocks base method.
func (m *MockStorage) GetTaskPushNotificationConfig(ctx context.Context, taskID, configID string) (a2a.TaskPushNotificationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskPushNotificationConfig", ctx, taskID, configID)
	ret0, _ := ret[0].(a2a.TaskPushNotificationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskPushNotificationConfig indicates an expected call of GetTaskPushNotificationConfig.
func (mr *MockStorageMockRecorder) GetTaskPushNotificationConfig(ctx, taskID, configID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskPushNotificationConfig", reflect.TypeOf((*MockStorage)(nil).GetTaskPushNotificationConfig), ctx, taskID, configID)
}

// ListContextFiles mocks base method.
func (m *MockStorage) ListContextFiles(ctx context.Context, contextID, pathPrefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContextFiles", ctx, contextID, pathPrefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContextFiles indicates an expected call of ListContextFiles.
func (mr *MockStorageMockRecorder) ListContextFiles(ctx, contextID, pathPrefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContextFiles", reflect.TypeOf((*MockStorage)(nil).ListContextFiles), ctx, contextID, pathPrefix)
}

// ListTaskFiles mocks base method.
func (m *MockStorage) ListTaskFiles(ctx context.Context, taskID, pathPrefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaskFiles", ctx, taskID, pathPrefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaskFiles indicates an expected call of ListTaskFiles.
func (mr *MockStorageMockRecorder) ListTaskFiles(ctx, taskID, pathPrefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaskFiles", reflect.TypeOf((*MockStorage)(nil).ListTaskFiles), ctx, taskID, pathPrefix)
}

// ListTaskPushNotificationConfig mocks base method.
func (m *MockStorage) ListTaskPushNotificationConfig(ctx context.Context, taskID string) ([]a2a.TaskPushNotificationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTaskPushNotificationConfig", ctx, taskID)
	ret0, _ := ret[0].([]a2a.TaskPushNotificationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaskPushNotificationConfig indicates an expected call of ListTaskPushNotificationConfig.
func (mr *MockStorageMockRecorder) ListTaskPushNotificationConfig(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaskPushNotificationConfig", reflect.TypeOf((*MockStorage)(nil).ListTaskPushNotificationConfig), ctx, taskID)
}

// ListTasksByContext mocks base method.
func (m *MockStorage) ListTasksByContext(ctx context.Context, contextID string, historyLength int) ([]*a2a.Task, []uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasksByContext", ctx, contextID, historyLength)
	ret0, _ := ret[0].([]*a2a.Task)
	ret1, _ := ret[1].([]uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTasksByContext indicates an expected call of ListTasksByContext.
func (mr *MockStorageMockRecorder) ListTasksByContext(ctx, contextID, historyLength any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasksByContext", reflect.TypeOf((*MockStorage)(nil).ListTasksByContext), ctx, contextID, historyLength)
}

// Load mocks base method.
func (m *MockStorage) Load(ctx context.Context, contextID, taskID string, from uint64, limit int) ([]a2a.StreamResponse, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, contextID, taskID, from, limit)
	ret0, _ := ret[0].([]a2a.StreamResponse)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Load indicates an expected call of Load.
func (mr *MockStorageMockRecorder) Load(ctx, contextID, taskID, from, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockStorage)(nil).Load), ctx, contextID, taskID, from, limit)
}

// PutContextFile mocks base method.
func (m *MockStorage) PutContextFile(ctx context.Context, contextID, path string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContextFile", ctx, contextID, path, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutContextFile indicates an expected call of PutContextFile.
func (mr *MockStorageMockRecorder) PutContextFile(ctx, contextID, path, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContextFile", reflect.TypeOf((*MockStorage)(nil).PutContextFile), ctx, contextID, path, data)
}

// PutTaskFile mocks base method.
func (m *MockStorage) PutTaskFile(ctx context.Context, taskID, path string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTaskFile", ctx, taskID, path, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTaskFile indicates an expected call of PutTaskFile.
func (mr *MockStorageMockRecorder) PutTaskFile(ctx, taskID, path, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTaskFile", reflect.TypeOf((*MockStorage)(nil).PutTaskFile), ctx, taskID, path, data)
}

// SaveTask mocks base method.
func (m *MockStorage) SaveTask(ctx context.Context, task *a2a.Task, expectedVersion, newVersion uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTask", ctx, task, expectedVersion, newVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTask indicates an expected call of SaveTask.
func (mr *MockStorageMockRecorder) SaveTask(ctx, task, expectedVersion, newVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTask", reflect.TypeOf((*MockStorage)(nil).SaveTask), ctx, task, expectedVersion, newVersion)
}

// SaveTaskPushNotificationConfig mocks base method.
func (m *MockStorage) SaveTaskPushNotificationConfig(ctx context.Context, config a2a.TaskPushNotificationConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTaskPushNotificationConfig", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTaskPushNotificationConfig indicates an expected call of SaveTaskPushNotificationConfig.
func (mr *MockStorageMockRecorder) SaveTaskPushNotificationConfig(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTaskPushNotificationConfig", reflect.TypeOf((*MockStorage)(nil).SaveTaskPushNotificationConfig), ctx, config)
}
