// Code generated by MockGen. DO NOT EDIT.
// Source: task_handle.go
//
// Generated by this command:
//
//	mockgen -source=task_handle.go -destination=mock_task_handle_test.go -package=atlasic
//

// Package atlasic is a generated GoMock package.
package atlasic

import (
	context "context"
	reflect "reflect"

	a2a "github.com/mashiike/atlasic/a2a"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskHandle is a mock of TaskHandle interface.
type MockTaskHandle struct {
	ctrl     *gomock.Controller
	recorder *MockTaskHandleMockRecorder
	isgomock struct{}
}

// MockTaskHandleMockRecorder is the mock recorder for MockTaskHandle.
type MockTaskHandleMockRecorder struct {
	mock *MockTaskHandle
}

// NewMockTaskHandle creates a new mock instance.
func NewMockTaskHandle(ctrl *gomock.Controller) *MockTaskHandle {
	mock := &MockTaskHandle{ctrl: ctrl}
	mock.recorder = &MockTaskHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskHandle) EXPECT() *MockTaskHandleMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockTaskHandle) AddMessage(ctx context.Context, parts []a2a.Part, optFns ...func(*a2a.MessageOptions)) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, parts}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMessage", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockTaskHandleMockRecorder) AddMessage(ctx, parts any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, parts}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockTaskHandle)(nil).AddMessage), varargs...)
}

// GetAcceptedOutputModes mocks base method.
func (m *MockTaskHandle) GetAcceptedOutputModes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcceptedOutputModes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAcceptedOutputModes indicates an expected call of GetAcceptedOutputModes.
func (mr *MockTaskHandleMockRecorder) GetAcceptedOutputModes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcceptedOutputModes", reflect.TypeOf((*MockTaskHandle)(nil).GetAcceptedOutputModes))
}

// GetContextID mocks base method.
func (m *MockTaskHandle) GetContextID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContextID indicates an expected call of GetContextID.
func (mr *MockTaskHandleMockRecorder) GetContextID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextID", reflect.TypeOf((*MockTaskHandle)(nil).GetContextID))
}

// GetInitialStatus mocks base method.
func (m *MockTaskHandle) GetInitialStatus() a2a.TaskStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitialStatus")
	ret0, _ := ret[0].(a2a.TaskStatus)
	return ret0
}

// GetInitialStatus indicates an expected call of GetInitialStatus.
func (mr *MockTaskHandleMockRecorder) GetInitialStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitialStatus", reflect.TypeOf((*MockTaskHandle)(nil).GetInitialStatus))
}

// GetTask mocks base method.
func (m *MockTaskHandle) GetTask(ctx context.Context, historyLength int) (*a2a.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, historyLength)
	ret0, _ := ret[0].(*a2a.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskHandleMockRecorder) GetTask(ctx, historyLength any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTaskHandle)(nil).GetTask), ctx, historyLength)
}

// GetTaskID mocks base method.
func (m *MockTaskHandle) GetTaskID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTaskID indicates an expected call of GetTaskID.
func (mr *MockTaskHandleMockRecorder) GetTaskID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskID", reflect.TypeOf((*MockTaskHandle)(nil).GetTaskID))
}

// UpdateStatus mocks base method.
func (m *MockTaskHandle) UpdateStatus(ctx context.Context, state a2a.TaskState, parts []a2a.Part, optFns ...func(*a2a.MessageOptions)) (a2a.TaskStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, state, parts}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStatus", varargs...)
	ret0, _ := ret[0].(a2a.TaskStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockTaskHandleMockRecorder) UpdateStatus(ctx, state, parts any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, state, parts}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockTaskHandle)(nil).UpdateStatus), varargs...)
}

// UpsertArtifact mocks base method.
func (m *MockTaskHandle) UpsertArtifact(ctx context.Context, artifact a2a.Artifact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertArtifact", ctx, artifact)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertArtifact indicates an expected call of UpsertArtifact.
func (mr *MockTaskHandleMockRecorder) UpsertArtifact(ctx, artifact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertArtifact", reflect.TypeOf((*MockTaskHandle)(nil).UpsertArtifact), ctx, artifact)
}
